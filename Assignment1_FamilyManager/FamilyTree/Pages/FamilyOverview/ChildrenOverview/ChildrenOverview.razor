@page "/childrenOverview"
@page "/dsfsdf"
@using LoginExample.Models.Family.Child
@using LoginExample.Data.AddFamilyMembersService
@using System.Text
@inject IAddFamilyMembersService AddFamilyMembersService;
<h3>ChildrenOverview</h3>
<link rel="stylesheet" type="text/css" href="css/FamilyOverview/SharedStyleAndImg/style.css">

<p>

    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="  Search by child first name" title="Type in a name" @oninput="@((arg) => FilterByChildFirstName(arg))">
    @* Filter adult by name: <input type="text" @oninput="@((arg) => FilterByChildFirstName(arg))" style="width: 50px"/> *@
</p>
<p>
    <input type="text" id="myInput" onkeyup="myFunction()" placeholder="  Search by child id" title="Type in a name" @oninput="@((arg) => FilterByChildId(arg))">
</p>
@if (_childrenDisplayed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Sex</th>
            <th>ID</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Child Interests</th>
            <th>Pets</th>

        </tr>
        </thead>
        <tbody>
        <!-- If the logged in user is an adult it will be highlighted -->
        @* <tr class="active-row"> *@
        @* 
        @* </tr> *@
        @foreach (var item in _childrenDisplayed)
        {
            <tr>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Sex</td>
                <td>@item.Id</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@ExtractChildInterests(item)</td>
                <td>@ExtractChildPets(item)</td>
            </tr>
        }

        </tbody>
    </table>
@code {
    private IList<Child> _childrenDisplayed;
    private IList<Child> _allChildren;

    private int? _filterById;
    private string _filterByFirstName;

    protected override async Task OnInitializedAsync()
    {
    // Generate the list of adultsDisplayed 
        _allChildren = AddFamilyMembersService.GetListOfChildren();
        _childrenDisplayed = _allChildren;
    }


    private void FilterByChildFirstName(ChangeEventArgs changeEventArgs)
    {
        _filterByFirstName = null;
        try
        {
            _filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterByChildId(ChangeEventArgs changeEventArgs)
    {
        _filterById = null;
        try
        {
            _filterById = int.Parse(changeEventArgs.Value.ToString());
            Console.WriteLine(_filterById);
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        _childrenDisplayed = _allChildren.Where(t =>
            (_filterById != null && t.Id == _filterById || _filterById == null) &&
            (_filterByFirstName != null && t.FirstName == _filterByFirstName || string.IsNullOrEmpty(_filterByFirstName))
            ).ToList();
    }

    private StringBuilder ExtractChildInterests(Child item)
    {
        StringBuilder temp = new StringBuilder();

        foreach (var interest in item.ChildInterests)
        {
            if (interest != null)
            {
                temp.Append(interest.Interest.Type + ",");
            }
        }
    // Removes last char, which is ','
        temp.Length--;
        return temp;
    }

    private StringBuilder ExtractChildPets(Child item)
    {
        StringBuilder temp = new StringBuilder();
        foreach (var pet in item.Pets)
        {
            if (pet != null)
            {
                temp.Append(pet.Species+ ",");
            }
        }
    // Removes last char, which is ','
        temp.Length--;
        return temp;
    }

}}
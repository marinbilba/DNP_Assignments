@page "/childrenOverview"
@page "/dghfdgfhdhg"
@using LoginExample.Models.Family.Child
@using LoginExample.Data.AddFamilyMembersService
@using System.Text
@inject IAddFamilyMembersService AddFamilyMembersService;

<link rel="stylesheet" type="text/css" href="css/FamilyOverview/SharedStyleAndImg/style.css">
<div class="jumbotron text-center">
  <h1>Children Overview</h1>
</div>
<div class="row">
    <div class="col-md-4">
        @* <p> *@
        <BlazoredTypeahead id="myInput" SearchMethod="FilterByChildFirstName" @bind-Value="_selectdChild" placeholder="Search by first name..." MinimumLength="2">
            <SelectedTemplate >
                @context.FirstName @context.LastName
            </SelectedTemplate>
            <ResultTemplate>
                @context.FirstName @context.LastName
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>
</div>
<br/>
<div class="row">
    <div class="col-md-4">
        @* <p> *@
        <BlazoredTypeahead id="myInput" SearchMethod="FilterByChildId" @bind-Value="_selectdChild" placeholder="Search by ID..." MinimumLength="2">
            <SelectedTemplate >
                @context.Id @context.LastName
            </SelectedTemplate>
            <ResultTemplate>
                @context.Id @context.LastName
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>
</div>
<br/>
<div class="row">
    <div class="col-md-2">
        <div class="button_cont" align="center"@onclick="@(ShowAllAdults)">
            <input type="button" class="example_d" value="Display all children" @onclick="@(ShowAllAdults)">
        </div>
    </div>
</div>
    @* If statement sets the table data to the search result *@
@if (_selectdChild != null)
{
 
    List<Child> temp = new List<Child>();
    temp.Add(_selectdChild);
    _childrenDisplayed = temp;
    _selectdChild = null;
}
@* Table  *@
@if (_childrenDisplayed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Sex</th>
            <th>ID</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Child Interests</th>
            <th>Pets</th>

        </tr>
        </thead>
        <tbody>
        <!-- If the logged in user is an adult it will be highlighted -->
        @* <tr class="active-row"> *@
        @* 
        @* </tr> *@
        @foreach (var item in _childrenDisplayed)
        {
            <tr>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.Sex</td>
                <td>@item.Id</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@ExtractChildInterests(item)</td>
                <td>@ExtractChildPets(item)</td>
            </tr>
        }

        </tbody>
    </table>
@code {
    private IList<Child> _childrenDisplayed;
    private IList<Child> _allChildren;

    private Child _selectdChild;
  

    protected override async Task OnInitializedAsync()
    {
    // Generate the list of adultsDisplayed 
        _allChildren = await AddFamilyMembersService.GetListOfChildren();
        _childrenDisplayed = _allChildren;
    }


    private async Task<IEnumerable<Child>> FilterByChildFirstName(string name)
    {
        return await Task.FromResult(_allChildren.Where(x => x.FirstName.ToLower().Contains(name.ToLower())).ToList());
    }

    private async Task<IEnumerable<Child>> FilterByChildId(string enteredId)
    {
        return await Task.FromResult(_allChildren.Where(x => x.Id.ToString().Contains(enteredId.ToLower())).ToList());
    }

    private void ShowAllAdults()
    {
        _childrenDisplayed = _allChildren;
    }

    private StringBuilder ExtractChildInterests(Child item)
    {
        StringBuilder temp = new StringBuilder();

        foreach (var interest in item.ChildInterests)
        {
            if (interest != null)
            {
                temp.Append(interest.Interest.Type + ",");
            }
        }
    // Removes last char, which is ','
        temp.Length--;
        return temp;
    }

    private StringBuilder ExtractChildPets(Child item)
    {
        StringBuilder temp = new StringBuilder();
        // Count required to prevent subtracting the char ',' from the child that does not have a pet
        int count = 0;
        foreach (var pet in item.Pets)
        {
            if (pet != null)
            {
                count++;
                temp.Append(pet.Species + ",");
            }
        }
    // Removes last char, which is ','
        if (count != 0)
        {
         temp.Length--;    
        }
        return temp;
    }

}}